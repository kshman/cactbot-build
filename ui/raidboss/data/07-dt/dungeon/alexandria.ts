import Conditions from '../../../../../resources/conditions';
import Outputs from '../../../../../resources/outputs';
import { Responses } from '../../../../../resources/responses';
import ZoneId from '../../../../../resources/zone_id';
import { RaidbossData } from '../../../../../types/data';
import { TriggerSet } from '../../../../../types/trigger';

// TODO: Improve the Purge sequence calls to be actively timed.
// TODO: Handle overlaps between Purge and Immune Response

// TODO: Determine which direction the SuperCell Matrix triangle is facing.
// TODO: Math out the positions of the Supercell Matrix lasers and directly call safe lanes.

// TODO: Better handle overlap between Terminate and other AoEs.

export interface Data extends RaidbossData {
  interferonCalls: string[];
  disinfectTarget?: string;
}

const triggerSet: TriggerSet<Data> = {
  id: 'Alexandria',
  zoneId: ZoneId.Alexandria,
  timelineFile: 'alexandria.txt',
  initData: () => {
    return {
      interferonCalls: [],
    };
  },
  triggers: [
    {
      id: 'Alexandria AntivirusX Immune Response Front',
      type: 'StartsUsing',
      netRegex: { id: '8E1A', source: 'Antivirus X', capture: false },
      response: Responses.goSides(),
    },
    {
      id: 'Alexandria AntivirusX Immune Response Back',
      type: 'StartsUsing',
      netRegex: { id: '8E1C', source: 'Antivirus X', capture: false },
      response: Responses.goFront(),
    },
    {
      // Interferon R is 12842, Interferon C is 12843
      id: 'Alexandria AntivirusX Interferon Collect',
      type: 'AddedCombatant',
      netRegex: { npcNameId: ['12842', '12843'] },
      run: (data, matches, output) => {
        const call = matches.npcNameId === '12843' ? output.avoid!() : output.in!();
        data.interferonCalls.push(call);
      },
      outputStrings: {
        avoid: {
          en: 'Avoid',
          ko: 'ÌîºÌï¥Ïöî',
        },
        in: Outputs.in,
      },
    },
    {
      id: 'Alexandria AntivirusX Interferon Call',
      type: 'AddedCombatant',
      netRegex: { npcNameId: ['12842', '12843'], capture: false },
      delaySeconds: 0.5,
      durationSeconds: 15,
      infoText: (data, _matches, output) => {
        if (data.interferonCalls.length !== 5)
          return;
        return output.combo!({ calls: data.interferonCalls.join(output.separator!()) });
      },
      run: (data) => {
        if (data.interferonCalls.length === 5) {
          data.interferonCalls = [];
        }
      },
      outputStrings: {
        combo: {
          en: '${calls}',
          ko: '${calls}',
        },
        separator: {
          en: ' => ',
          ko: ' üîú ',
        },
      },
    },
    {
      id: 'Alexandria AntivirusX Disinfection',
      type: 'HeadMarker',
      netRegex: { id: '0158' },
      condition: Conditions.targetIsYou(),
      alertText: (_data, _matches, output) => output.spreadDontStack!(),
      run: (data, matches) => data.disinfectTarget = matches.target,
      outputStrings: {
        spreadDontStack: {
          en: 'Cleave -- Don\'t stack!',
          ko: 'Ï™ºÍ∞úÍ∏∞ -- Î≠âÏπòÎ©¥ ÏïàÎêòÏöî!',
        },
      },
    },
    {
      id: 'Alexandria AntivirusX Quarantine',
      type: 'HeadMarker',
      netRegex: { id: '003E' },
      condition: (data) => data.me !== data.disinfectTarget,
      delaySeconds: 0.5,
      response: Responses.stackMarkerOn(),
      run: (data) => delete data.disinfectTarget,
    },
    {
      id: 'Alexandria AntivirusX Cytolysis',
      type: 'StartsUsing',
      netRegex: { id: '8E23', source: 'Antivirus X', capture: false },
      response: Responses.aoe(),
    },
    {
      id: 'Alexandria Amalgam Electrowave',
      type: 'StartsUsing',
      netRegex: { id: '8DF1', source: 'Amalgam', capture: false },
      response: Responses.aoe(),
    },
    {
      id: 'Alexandria Amalgam Disassembly',
      type: 'StartsUsing',
      netRegex: { id: '8DE3', source: 'Amalgam', capture: false },
      response: Responses.aoe(),
    },
    {
      id: 'Alexandria Amalgam Supercell Matrix Triangle',
      type: 'StartsUsing',
      netRegex: { id: '98E0', source: 'Amalgam', capture: false },
      alertText: (_data, _matches, output) => output.avoidLightning!(),
      outputStrings: {
        avoidLightning: {
          en: 'Out of lightning triangle',
          ko: 'Î≤àÍ∞ú ÏÇºÍ∞ÅÌòï ÌîºÌï¥Ïöî',
        },
      },
    },
    {
      id: 'Alexandria Amalgam Supercell Matrix Lasers',
      type: 'StartsUsing',
      netRegex: { id: '98E2', source: 'Amalgam', capture: false },
      suppressSeconds: 1,
      alertText: (_data, _matches, output) => output.avoidLasers!(),
      outputStrings: {
        avoidLasers: {
          en: 'Avoid Wall Lasers',
          ko: 'Î≤Ω Î†àÏù¥Ï†Ä ÌîºÌï¥Ïöî',
        },
      },
    },
    {
      id: 'Alexandria Amalgam Centralized Current',
      type: 'StartsUsing',
      netRegex: { id: '8DE7', source: 'Amalgam', capture: false },
      response: Responses.goSides(),
    },
    {
      id: 'Alexandria Amalgam Split Current',
      type: 'StartsUsing',
      netRegex: { id: '8DEB', source: 'Amalgam', capture: false },
      response: Responses.goMiddle(),
    },
    {
      id: 'Alexandria Amalgam Static Spark',
      type: 'HeadMarker',
      netRegex: { id: '008B' },
      condition: Conditions.targetIsYou(),
      response: Responses.spread(),
    },
    {
      id: 'Alexandria Amalgam Amalgamight',
      type: 'HeadMarker',
      netRegex: { id: '00DA' },
      response: Responses.tankBuster(),
    },
    {
      id: 'Alexandria Amalgam Superbolt',
      type: 'HeadMarker',
      netRegex: { id: '00A1' },
      response: Responses.stackMarkerOn(),
    },
    {
      id: 'Alexandria Amalgam Ternary Charge',
      type: 'StartsUsing',
      netRegex: { id: '9955', source: 'Amalgam', capture: false },
      response: Responses.getOutThenIn(),
    },
    {
      id: 'Alexandria Eliminator Disruption',
      type: 'StartsUsing',
      netRegex: { id: '8F9D', source: 'Eliminator', capture: false },
      response: Responses.aoe(),
    },
    {
      id: 'Alexandria Eliminator Partition Left',
      type: 'StartsUsing',
      netRegex: { id: '9951', source: 'Eliminator', capture: false },
      response: Responses.goRight(),
    },
    {
      // It's not clear why, but there's a specific Partition 985F that's used for the
      // initial Partition cast and then never again.
      // All subsequent right-cleave Partitions use 9946.
      id: 'Alexandria Eliminator Partition Right',
      type: 'StartsUsing',
      netRegex: { id: ['985F', '9946'], source: 'Eliminator', capture: false },
      response: Responses.goLeft(),
    },
    {
      id: 'Alexandria Eliminator Terminate',
      type: 'StartsUsing',
      netRegex: { id: '9ABF', source: 'Eliminator', capture: false },
      alertText: (_data, _matches, output) => output.avoidHand!(),
      outputStrings: {
        avoidHand: {
          en: 'Avoid hand laser',
          ko: 'ÏÜê Î†àÏù¥Ï†Ä ÌîºÌï¥Ïöî',
        },
      },
    },
    {
      id: 'Alexandria Eliminator Halo of Destruction',
      type: 'StartsUsing',
      netRegex: { id: '9AC0', source: 'Eliminator', capture: false },
      suppressSeconds: 1,
      alertText: (_data, _matches, output) => output.underElimbit!(),
      outputStrings: {
        underElimbit: {
          en: 'Get under Elimbit',
          ko: 'Elimbit ÏïÑÎûòÎ°ú',
        },
      },
    },
    {
      id: 'Alexandria Eliminator Electray',
      type: 'HeadMarker',
      netRegex: { id: '00DA' },
      condition: Conditions.targetIsYou(),
      response: Responses.spread(),
    },
    {
      // This is a stack laser visual, but there is no associated 27 line,
      // and this 21 line on a single target seems to stand in for it.
      id: 'Alexandria Eliminator Overexposure',
      type: 'Ability',
      netRegex: { id: '8FAA', source: 'Eliminator' },
      response: Responses.stackMarkerOn(),
    },
    {
      id: 'Alexandria Eliminator Holo Ark',
      type: 'Ability',
      netRegex: { id: '8FB5', source: 'Eliminator', capture: false },
      delaySeconds: 5, // This is a wind-up, actual damage is 10s later on 8FB6.
      response: Responses.aoe(),
    },
    {
      id: 'Alexandria Eliminator Impact',
      type: 'StartsUsing',
      netRegex: { id: '8FBA', source: 'Eliminator', capture: false },
      response: Responses.knockback(),
    },
    {
      id: 'Alexandria Eliminator Light Of Salvation',
      type: 'HeadMarker',
      netRegex: { id: '0216' },
      condition: Conditions.targetIsYou(),
      response: Responses.spread(),
    },
    {
      // This is a stack laser visual, but there is no associated 27 line,
      // and this 21 line on a single target seems to stand in for it.
      id: 'Alexandria Eliminator Light Of Devotion',
      type: 'Ability',
      netRegex: { id: '8FB2', source: 'Eliminator' },
      response: Responses.stackMarkerOn(),
    },
    {
      id: 'Alexandria Eliminator Elimination',
      type: 'StartsUsing',
      netRegex: { id: '8FBB', source: 'Eliminator', capture: false },
      alertText: (_data, _matches, output) => output.dodgeLasers!(),
      outputStrings: {
        dodgeLasers: {
          en: 'Dodge Multiple Lasers',
          ko: 'Ïó¨Îü¨ Î†àÏù¥Ï†Ä ÌîºÌïòÍ∏∞',
        },
      },
    },
  ],
  timelineReplace: [
    {
      'locale': 'en',
      'replaceText': {
        'Centralized Current/Split Current': 'Centralized/Split Current',
        'Pathocircuit Purge/Pathocross Purge': 'Purge',
      },
    },
    {
      'locale': 'de',
      'replaceSync': {
        'Amalgam': 'Amalgam',
        'Antivirus X': 'Antivirus X',
        'Eliminator': 'Eliminator',
        'Interferon C': 'Antivirus C',
        'Interferon R': 'Antivirus R',
      },
      'replaceText': {
        'Amalgamight': 'Amalgamacht',
        'Centralized Current': 'Zentraler Strom',
        'Cytolysis': 'Zytolyse',
        'Disassembly': 'Disassemblierung',
        'Disinfection': 'Desinfektion',
        'Disruption': 'St√∂rung',
        'Electray': 'Elektroblitz',
        'Electrowave': 'Elektrowelle',
        'Elimination': 'Eliminierung',
        'Explosion': 'Explosion',
        'Halo of Destruction': 'Ring der Zerst√∂rung',
        'Holo Ark': 'Holo-Arche',
        'Immune Response': 'Immunreaktion',
        'Impact': 'Impakt',
        'Light of Devotion': 'Licht der Hingabe',
        'Light of Salvation': 'Licht der Erl√∂sung',
        'Overexposure': '√úberstrahlung',
        'Partition': 'Partition',
        'Pathocircuit Purge': 'Pathokreisende S√§uberung',
        'Pathocross Purge': 'Pathokreuzende S√§uberung',
        'Quarantine': 'Quarant√§ne',
        'Split Current': 'Geteilter Strom',
        'Static Spark': 'Statischer Schlag',
        'Subroutine': 'Unterprogramm',
        'Superbolt': 'Supra-Blitzschlag',
        'Supercell Matrix': 'Superzellen-Matrix',
        'Terminate': 'Terminierung',
        'Ternary Charge': 'Tern√§re Ladung',
        'Voltburst': 'Voltastischer Knall',
        '\\(corners\\)': '(Ecken)',
        '\\(front\\)': '(Vorne)',
        '\\(lasers\\)': '(Laser)',
        '\\(sides\\)': '(Seiten)',
        '\\(triangle\\)': '(Dreieck)',
      },
    },
    {
      'locale': 'fr',
      'replaceSync': {
        'Amalgam': 'Amalgame Y',
        'Antivirus X': 'Anti-virus X',
        'Eliminator': 'Annihilation',
        'Interferon C': 'Programme anti-intrusion C',
        'Interferon R': 'Programme anti-intrusion R',
      },
      'replaceText': {
        'Amalgamight': 'Ardeur amalgam√©e',
        'Centralized Current': 'Courant centralis√©',
        'Cytolysis': 'Cytolyse',
        'Disassembly': 'D√©sassemblage',
        'Disinfection': 'D√©sinfection',
        'Disruption': 'Perturbation',
        'Electray': '√âlectrorayon',
        'Electrowave': '√âlectrovague',
        'Elimination': '√âlimination',
        'Explosion': 'Explosion',
        'Halo of Destruction': 'Halo massacreur',
        'Holo Ark': 'Holo-arc',
        'Immune Response': 'R√©action immunitaire',
        'Impact': 'Impact',
        'Light of Devotion': 'Clart√© de d√©votion',
        'Light of Salvation': 'Clart√© salvatrice',
        'Overexposure': 'Multiexposition',
        'Partition': 'Partition',
        'Pathocircuit Purge': 'Purge de circuits',
        'Pathocross Purge': 'Purge crois√©e',
        'Quarantine': 'Quarantaine',
        'Split Current': 'Courant divis√©',
        'Static Spark': '√âtincelle statique',
        'Subroutine': 'Sous-routine',
        'Superbolt': 'Super √©clair',
        'Supercell Matrix': 'Matrice supercellulaire',
        'Terminate': 'Terminaison',
        'Ternary Charge': 'Charge ternaire',
        'Voltburst': '√âclat d\'√©clair',
        '\\(corners\\)': '(Coins)',
        '\\(front\\)': '(Devant)',
        '\\(lasers\\)': '(Lasers)',
        '\\(sides\\)': '(C√¥t√©s)',
        '\\(triangle\\)': '(Triangle)',
      },
    },
    {
      'locale': 'ja',
      'missingTranslations': true,
      'replaceSync': {
        'Amalgam': '„Ç¢„Éû„É´„Ç¨„É†',
        'Antivirus X': 'Êäó‰Ωì„Éó„É≠„Ç∞„É©„É†X',
        'Eliminator': '„Ç®„É™„Éü„Éç„Éº„Çø„Éº',
        'Interferon C': 'Êäó‰Ωì„Éó„É≠„Ç∞„É©„É†C',
        'Interferon R': 'Êäó‰Ωì„Éó„É≠„Ç∞„É©„É†R',
      },
      'replaceText': {
        'Amalgamight': '„Ç¢„Éû„É´„Ç¨„É†„Éû„Ç§„Éà',
        'Centralized Current': '„Çª„É≥„Éà„É©„É´„Ç´„É¨„É≥„Éà',
        'Cytolysis': '„Çµ„Ç§„Çø„É™„Ç∑„Çπ',
        'Disassembly': '„Éá„Ç£„Çπ„Ç¢„Çª„É≥„Éñ„É™',
        'Disinfection': '„Éá„Ç£„Çπ„Ç§„É≥„Éï„Çß„ÇØ„Ç∑„Éß„É≥',
        'Disruption': '„Éá„Ç£„Çπ„É©„Éó„Ç∑„Éß„É≥',
        'Electray': '„Ç®„É¨„ÇØ„Éà„É≠„É¨„Ç§',
        'Electrowave': '„Ç®„É¨„ÇØ„Éà„É≠„Ç¶„Çß„Éº„Éñ',
        'Elimination': '„Ç®„É™„Éü„Éç„Éº„Ç∑„Éß„É≥',
        'Explosion': 'ÁàÜÁô∫',
        'Halo of Destruction': '„Éû„Çµ„Ç´„Éº„Éò„Ç§„É≠„Éº',
        'Holo Ark': '„É©„Çπ„Éà„Ç¢„Éº„ÇØ',
        'Immune Response': '„Ç§„Éü„É•„Éº„É≥„É™„Ç¢„ÇØ„Ç∑„Éß„É≥',
        'Impact': 'Ë°ùÊíÉ',
        'Light of Devotion': '„É©„Ç§„Éà„Éç„Çπ„Éª„Éá„Ç£„É¥„Ç©„Éº„Ç∑„Éß„É≥',
        'Light of Salvation': '„É©„Ç§„Éà„Éç„Çπ„Éª„Çµ„É´„Éô„Ç§„Ç∑„Éß„É≥',
        'Overexposure': '„Éû„É´„ÉÅ„Ç®„ÇØ„Çπ„Éù„Éº„Ç∏„É£„Éº',
        'Partition': '„Éë„Éº„ÉÜ„Ç£„Ç∑„Éß„É≥',
        'Pathocircuit Purge': '„Çµ„Éº„Ç≠„ÉÉ„Éà„Éë„Éº„Ç∏',
        'Pathocross Purge': '„ÇØ„É≠„Çπ„Éë„Éº„Ç∏',
        'Quarantine': '„ÇØ„Ç°„É©„É≥„ÉÜ„Ç£„É≥',
        'Split Current': '„Çπ„Éó„É™„ÉÉ„Éà„Ç´„É¨„É≥„Éà',
        'Static Spark': '„Çπ„Éù„ÉÉ„Éà„Çπ„Éë„Éº„ÇØ',
        'Subroutine': '„Çµ„Éñ„É´„Éº„ÉÅ„É≥',
        'Superbolt': '„Çπ„Éº„Éë„Éº„Éú„É´„Éà',
        'Supercell Matrix': '„Ç´„É¨„É≥„Éà„Éû„Éà„É™„ÇØ„Çπ',
        'Terminate': '„Çø„Éº„Éü„Éç„Éº„Ç∑„Éß„É≥',
        'Ternary Charge': '„Éà„É©„Ç§„Éê„Éº„Çπ„Éà',
        'Voltburst': '„Éú„É´„Éà„Éê„Éº„Çπ„Éà',
      },
    },
    {
      'locale': 'cn',
      'replaceSync': {
        'Amalgam': 'ËΩØÊÄßËûçÂêà‰Ωì',
        'Antivirus X': 'ÂèçÁóÖÊØíÁ®ãÂ∫èX',
        'Eliminator': 'Ê∏ÖÈô§ËÄÖ',
        'Interferon C': 'ÂèçÁóÖÊØíÁ®ãÂ∫èC',
        'Interferon R': 'ÂèçÁóÖÊØíÁ®ãÂ∫èR',
      },
      'replaceText': {
        'Amalgamight': 'ËûçÂêàÂ®ÅËÉΩ',
        'Centralized Current': 'ÈõÜ‰∏≠ÊîæÁîµ',
        'Cytolysis': 'ÁªÜËÉûÊ∫∂Ëß£',
        'Disassembly': 'Ëß£‰Ωì',
        'Disinfection': 'Ê∂àÊØí',
        'Disruption': 'Â¥©Ë£Ç',
        'Electray': 'Èõ∑ËΩ¨Ë¥®Â∞ÑÁ∫ø',
        'Electrowave': 'Èõ∑ËΩ¨Ë¥®Ê≥¢Âä®',
        'Elimination': 'Ê∏ÖÈô§',
        'Explosion': 'ÁàÜÁÇ∏',
        'Halo of Destruction': 'ÊØÅÁÅ≠ÂÖâÁéØ',
        'Holo Ark': 'Êú´‰∏ñÊñπËàü',
        'Immune Response': 'ÂÖçÁñ´ÂèçÂ∫î',
        'Impact': 'ÂÜ≤Âáª',
        'Light of Devotion': 'ÁåÆË∫´‰πãÂÖâ',
        'Light of Salvation': 'ÊïëËµé‰πãÂÖâ',
        'Overexposure': 'Â§öÈáçÊõùÂÖâ',
        'Partition': 'Êñ≠Êñ©',
        'Pathocircuit Purge': 'ÁéØÁä∂Ê∏ÖÈô§',
        'Pathocross Purge': 'ÂçÅÂ≠óÊ∏ÖÈô§',
        'Quarantine': 'Ê£ÄÁñ´',
        'Split Current': 'ÂàÜË£ÇÊîæÁîµ',
        'Static Spark': 'ÈùôÁîµÁÅ´Ëä±',
        'Subroutine': 'Â≠êÁ®ãÂ∫è',
        'Superbolt': 'Ë∂ÖÁîµÂáª',
        'Supercell Matrix': 'ÁîµÊµÅÁü©Èòµ',
        'Terminate': 'ÁªàÁªì',
        'Ternary Charge': '‰∏âÈáçÊîæÁîµ',
        'Voltburst': 'ÁîµÂáªÁàÜÂèë',
        '\\(corners\\)': '(ÂõõËßí)',
        '\\(front\\)': '(ÂâçÊñπ)',
        '\\(lasers\\)': '(ÊøÄÂÖâ)',
        '\\(sides\\)': '(ÂõõËæπ)',
        '\\(triangle\\)': '(‰∏âËßí)',
      },
    },
  ],
};

export default triggerSet;
