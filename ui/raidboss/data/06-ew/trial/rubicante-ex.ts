import Conditions from '../../../../../resources/conditions';
import Outputs from '../../../../../resources/outputs';
import { Responses } from '../../../../../resources/responses';
import ZoneId from '../../../../../resources/zone_id';
import { RaidbossData } from '../../../../../types/data';
import { TriggerSet } from '../../../../../types/trigger';

export interface Data extends RaidbossData {
  circle: number;
  getFourfold: boolean;
  getTwinfold: boolean;
}

const triggerSet: TriggerSet<Data> = {
  zoneId: ZoneId.MountOrdealsExtreme,
  timelineFile: 'rubicante-ex.txt',
  initData: () => {
    return {
      circle: 0,
      getFourfold: false,
      getTwinfold: false,
    };
  },
  timelineTriggers: [
    {
      // Gnosis does in fact have a cast time, but it's only 2.7 seconds.
      // It's safer to warn via the timeline.
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Arch Inferno ÎØ∏Î¶¨ ÏïåÎ¶º',
      regex: /^Arch Inferno$/,
      beforeSeconds: 24,
      durationSeconds: 8,
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'ÎÇ®Î∂ÅÏúºÎ°ú ÌåÄ',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Flamespire Claw ÎØ∏Î¶¨ ÏïåÎ¶º',
      regex: /^Flamespire Claw$/,
      beforeSeconds: 18,
      durationSeconds: 8,
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Í≥ß Ï£ºÏÇ¨ÏúÑ',
        },
      },
    },
  ],
  triggers: [
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Inferno',
      type: 'StartsUsing',
      netRegex: { id: '7D2C', source: 'Rubicante', capture: false },
      response: Responses.aoe(),
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Ordeal of Purgation',
      type: 'StartsUsing',
      netRegex: { id: '80E9', source: 'Rubicante' },
      durationSeconds: 8,
      infoText: (data, _matches, output) => {
        data.circle++;
        return {
          0: output.p0!(),
          1: output.p1!(),
          2: output.p2!(),
          3: output.p3!(),
          4: output.p4!(),
          5: output.p5!(),
          6: output.p6!(),
          7: output.p7!(),
          8: output.p8!(),
        }[data.circle];
      },
      outputStrings: {
        p0: {
          en: 'ÏïÑÎãà Ïò§Î•òÏù∏Í∞Ä...',
        },
        p1: {
          en: '#1: Î≥¥Ïä§ Îí§Î°ú / ÌöåÏ†Ñ Î∞©Ìñ•Ïóê ÎßûÏ∂∞ Ï¢åÏö∞Î°ú',
        },
        p2: {
          en: '#2: V Îí§Ï™Ω',
        },
        p3: {
          en: '#3: V ÏïàÏ™Ω (Î≤ΩÍπåÏßÄ Í∞ÄÎ©¥ Ï¢ãÏùå)',
        },
        p4: {
          en: '#4: ^_^ ÏóêÏÑú ÌöåÏ†Ñ Î∞©Ìñ• ^ÏúºÎ°ú',
        },
        p5: {
          en: '#5: Î≥¥Ïä§ Îí§Î°ú',
        },
        p6: {
          en: '#6: V Îí§Ï™Ω, Ï¢åÏö∞ ÏßÅÏÑ† Ï∞æÏïÑ Í∑∏ Î∞ëÎã®',
        },
        p7: {
          en: '#7: V ÏïàÏ™Ω (Î≤ΩÍπåÏßÄ Í∞ÄÎ©¥ Ï¢ãÏùå)',
        },
        p8: {
          en: '#8: ^_^ ÏóêÏÑú ÌöåÏ†Ñ Î∞©Ìñ• ^ÏúºÎ°ú',
        },
        unknown: Outputs.unknown,
      }
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Shattering Heat',
      type: 'StartsUsing',
      netRegex: { id: '7D2D', source: 'Rubicante' },
      response: Responses.tankBuster(),
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Arch Inferno',
      type: 'StartsUsing',
      netRegex: { id: '7CF9', source: 'Rubicante', capture: false },
      alertText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'ÎÇ®Î∂ÅÏúºÎ°ú ÌåÄ ÎÇòÎà†Ïöî!',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Spike of Flame',
      type: 'StartsUsing',
      netRegex: { id: '7D02', source: 'Rubicante' },
      condition: Conditions.targetIsYou(),
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Ìù©Ïñ¥Ï†∏Ïöî',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Fourfold Flame',
      type: 'StartsUsing',
      netRegex: { id: '7D03', source: 'Rubicante' },
      condition: (data) => !data.getFourfold,
      infoText: (_data, _matches, output) => output.text!(),
      run: (data) => data.getFourfold = true,
      outputStrings: {
        text: {
          en: 'ÌûêÎü¨Îûë Î≠âÏ≥êÏöî',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Twinfold Flame',
      type: 'StartsUsing',
      netRegex: { id: '7D04', source: 'Rubicante' },
      condition: (data) => !data.getTwinfold,
      infoText: (_data, _matches, output) => output.text!(),
      run: (data) => data.getTwinfold = true,
      outputStrings: {
        text: {
          en: 'ÏßùÍøçÏù¥Îûë ÎëòÏù¥ Î≠âÏ≥êÏöî',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Conflagration',
      type: 'StartsUsing',
      netRegex: { id: '7CFD', source: 'Rubicante' },
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Î∞îÎã• Ï°∞Ïã¨',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Radial Flagration',
      type: 'StartsUsing',
      netRegex: { id: '7CFE', source: 'Rubicante', capture: false },
      alertText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'ÌîÑÎ°úÌã¥! ÏûêÍ∏∞ ÏûêÎ¶¨Î°ú',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Blazing Rapture',
      type: 'StartsUsing',
      netRegex: { id: '7D06', source: 'Rubicante', capture: false },
      delaySeconds: 6,
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'ÏïÑÌîà Ï†ÑÏ≤¥ Í≥µÍ≤©!', // ÎòêÎäî Ï´Ñ Î™ªÏû°ÏïÑÏÑú Ï†ÑÎ©∏
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Flamespire Brand',
      type: 'StartsUsing',
      netRegex: { id: '7D13', source: 'Rubicante', capture: false },
      durationSeconds: 6,
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Í≥ß Ïö¥ÎèôÌöå~üéâ ÎîîÎ≤ÑÌîÑ ÌôïÏù∏',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Inferno Single Wing',
      type: 'StartsUsing',
      netRegex: { id: '7D0F', source: 'Rubicante', capture: false },
      alertText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Í∞úÏù∏ Ïû•Ìåê! ÏûêÍ∏∞ ÏûêÎ¶¨Î°ú',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Scalding Signal',
      type: 'StartsUsing',
      netRegex: { id: '7D24', source: 'Rubicante', capture: false },
      alertText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: '‚äóÎ∞ñÏúºÎ°ú! ÏûêÍ∏∞ ÏûêÎ¶¨Î°ú',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Scalding Ring',
      type: 'StartsUsing',
      netRegex: { id: '7D25', source: 'Rubicante', capture: false },
      alertText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: '‚äôÏïàÏúºÎ°ú! ÏûêÍ∏∞ ÏûêÎ¶¨Î°ú',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Sweeping Immolation / Partial',
      type: 'StartsUsing',
      netRegex: { id: '7D20', source: 'Rubicante', capture: false },
      alertText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Î≥¥Ïä§ Îí§ÏóêÏÑú Ìù©Ïñ¥Ï†∏Ïöî! (Ïû•ÌåêÏ°∞Ïã¨)',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Sweeping Immolation / Total',
      type: 'StartsUsing',
      netRegex: { id: '7D21', source: 'Rubicante', capture: false },
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Î≥¥Ïä§ Îí§ÏóêÏÑú Î≠âÏ≥êÏöî! (Ïû•ÌåêÏ°∞Ïã¨)',
        },
      },
    },
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Dualfire',
      type: 'StartsUsing',
      netRegex: { id: '7D2E', source: 'Rubicante' },
      response: (data, _matches, output) => {
        if (data.role === 'tank')
          return { alertText: output.tank!() };
        return { infoText: output.notank!() };
      },
      outputStrings: {
        tank: {
          en: 'ÌÉ±ÌÅ¨ ÌÅ¥Î†àÎ∏å! ÎëòÏù¥ ÎπÑÏä§Îì¨ÌïòÍ≤å Ïú†ÎèÑÌï¥Ïöî',
        },
        notank: {
          en: 'ÌÉ±ÌÅ¨ ÌÅ¥Î†àÎ∏å! Î≥¥Ïä§ ÏóâÎç©Ïù¥Î°ú',
        }
      },
    },
    /*
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Flamespire Claw',
      type: 'StartsUsing',
      netRegex: { id: '7D28', source: 'Rubicante', capture: false },
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Ï£ºÏÇ¨ÏúÑ ÎààÍ∏à ÌôïÏù∏',
        },
      },
    },
    */
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Ghastly Flame',
      type: 'StartsUsing',
      netRegex: { id: '7D0C', source: 'Flamesent', capture: false },
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'Ï´Ñ Ïû°ÏïÑÏöî!',
        },
      },
    },
    /*
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Flamesent Shattering Heat Tether',
      type: 'Tether',
      netRegex: { id: '0054' },
      condition: (data, matches) => matches.target === data.me && data.role !== 'tank',
      infoText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'ÎÇ¥Í≤å Î≤ÑÏä§ÌÑ∞ Ï§ÑÏù¥!',
        },
      },
    },
    */
    {
      id: 'Î£®ÎπÑÏπ∏ÌÖåEX Flamesent Tether',
      type: 'Tether',
      netRegex: { id: '00C0' },
      condition: (data, matches) => matches.target === data.me,
      alertText: (_data, _matches, output) => output.text!(),
      outputStrings: {
        text: {
          en: 'ÎÇ¥Í≤å Î≤îÏúÑ Ï§ÑÏù¥!',
        },
      },
    },
  ],
  timelineReplace: [
    {
      'locale': 'en',
      'replaceText': {
        'Spike of Flame/Fourfold Flame/Twinfold Flame': 'Frames',
        'Partial Immolation/Total Immolation': 'Partial/Total Immolation',
      },
    },
  ],
};

export default triggerSet;
